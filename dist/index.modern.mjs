import e from"node-fetch";function t(){return t=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&(e[r]=s[r])}return e},t.apply(this,arguments)}class s{constructor(e){if(this.apiKey=void 0,this.baseUrl=void 0,!e.apiKey&&!process.env.KICKPLAN_API_KEY)throw new Error("Please supply a KICKPLAN_API_KEY to initialize this client.");this.apiKey=e.apiKey||process.env.KICKPLAN_API_KEY,this.baseUrl=e.baseUrl||process.env.KICKPLAN_BASE_URL||"https://demo-control.proxy.kickplan.io"}request(s,r){const i=`${this.baseUrl}${s}`,o=t({},r,{headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`}});return e(i,o).then(e=>{if(e.ok)return e.json();throw new Error(e.statusText)})}}class r extends s{resolve(){return this.request("/api/features/resolve")}resolveWithAccount(e){return this.request("/api/features/resolve",{method:"POST",body:JSON.stringify({context:{account_id:e}})})}isFeatureAvailableForAccount(e,t){return this.request(`/api/features/${e}/resolve`,{method:"POST",body:JSON.stringify({context:{account_id:t}})})}}class i extends s{post(e){return this.request("/api/features/resolve",{method:"POST",body:JSON.stringify({key:e.key,plans:e.plans})})}}class o extends s{setMetricsKey(e){return this.request(`/api/metrics/${e.key}/set`,{method:"POST",body:JSON.stringify({value:e.value,timestamp:e.timestamp})})}}class n{constructor(e){this.features=void 0,this.accounts=void 0,this.metrics=void 0,this.features=new r(e),this.accounts=new i(e),this.metrics=new o(e)}}export{n as KickplanApi};
